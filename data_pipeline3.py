# -*- coding: utf-8 -*-
"""data_pipeline

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ORG-WuzMzb1dmDQzO-5VNiwl9lGz0TRl
"""
from __future__ import annotations
from airflow.models.dag import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pandas as pd
import sqlite3
import warnings
warnings.simplefilter("ignore")

def extract_data():
    file_path = 'C:/Users/USER/Downloads/datasets/database.sqlite'
    conn = sqlite3.connect(file_path)

    try:
        conn = sqlite3.connect(file_path)

        tables = pd.read_sql("""SELECT *
                            FROM sqlite_master
                            WHERE type='table';""", conn)

        unique_players = pd.read_sql("""SELECT 	player_name, PLAYER.player_api_id as player_id,
                                        PA_Grouped.date AS date, birthday,
                                        AVG(weight) AS avg_weight,
                                        AVG(height) AS avg_height,
                                        (avg(PA_Grouped.avg_overall_rating)) AS avg_overall_rating,
                                        (avg(PA_Grouped.avg_potential)) AS avg_potential,
                                        (avg(PA_Grouped.avg_crossing)) AS avg_crossing,
                                        (avg(PA_Grouped.avg_finishing)) AS avg_finishing,
                                        (avg(PA_Grouped.avg_heading_accuracy)) AS avg_heading_accuracy,
                                        (avg(PA_Grouped.avg_short_passing)) AS avg_short_passing,
                                        (avg(PA_Grouped.avg_dribbling)) AS avg_dribbling,
                                        (avg(PA_Grouped.avg_free_kick_accuracy)) AS avg_free_kick_accuracy,
                                        (avg(PA_Grouped.avg_long_passing)) AS avg_long_passing,
                                       (avg(PA_Grouped.avg_ball_control)) AS avg_ball_control,
                                       (avg(PA_Grouped.avg_shot_power)) AS avg_shot_power,
                                       (avg(PA_Grouped.avg_stamina)) AS avg_stamina,
                                       (avg(PA_Grouped.avg_strength)) AS avg_strength,
                                       (avg(PA_Grouped.avg_positioning)) AS avg_positioning,
                                       (avg(PA_Grouped.avg_vision)) AS avg_vision,
                                       (avg(PA_Grouped.avg_penalties)) AS avg_penalties,
                                       (avg(PA_Grouped.avg_gk_reflexes)) AS avg_gk_reflexes
                            FROM PLAYER
                            LEFT JOIN (SELECT Player_Attributes.player_api_id,
                                        avg(Player_Attributes.overall_rating) AS avg_overall_rating,
                                        avg(Player_Attributes.potential) AS avg_potential,
                                        avg(Player_Attributes.crossing) AS avg_crossing,
                                        avg(Player_Attributes.finishing) AS avg_finishing,
                                        avg(Player_Attributes.heading_accuracy) AS avg_heading_accuracy,
                                        avg(Player_Attributes.short_passing) AS avg_short_passing,
                                        avg(Player_Attributes.dribbling) AS avg_dribbling,
                                        avg(Player_Attributes.free_kick_accuracy) AS avg_free_kick_accuracy,
                                        avg(Player_Attributes.long_passing) AS avg_long_passing,
                                       avg(Player_Attributes.ball_control) AS avg_ball_control,
                                       avg(Player_Attributes.shot_power) AS avg_shot_power,
                                       avg(Player_Attributes.stamina) AS avg_stamina,
                                       avg(Player_Attributes.strength) AS avg_strength,
                                       avg(Player_Attributes.positioning) AS avg_positioning,
                                       avg(Player_Attributes.vision) AS avg_vision,
                                       avg(Player_Attributes.penalties) AS avg_penalties,
                                       avg(Player_Attributes.gk_reflexes) AS avg_gk_reflexes,
                                       date
                                       FROM Player_Attributes
                                       GROUP BY Player_Attributes.player_api_id)
                                       AS PA_Grouped ON PLAYER.player_api_id = PA_Grouped.player_api_id
                            GROUP BY PLAYER.player_api_id
                            ORDER BY PLAYER.player_api_id;""", conn)
        best_teams = pd.read_sql("""WITH
                        temp AS (

                            SELECT m.match_api_id,
                                ht.team_long_name AS  home_team,
                                AT.team_long_name AS away_team,
                                home_team_goal,
                                away_team_goal,
                                ht.team_api_id AS h_id,
                                at.team_api_id AS a_id,
                            CASE
                                when m.home_team_goal > m.away_team_goal then ht.team_api_id
                                when m.home_team_goal < m.away_team_goal then at.team_api_id else 'Draw' end as winner
                            FROM Match AS m
                            LEFT JOIN Team AS ht on ht.team_api_id = m.home_team_api_id
                            LEFT JOIN Team AS at on at.team_api_id = m.away_team_api_id
                        ),
                        home AS (
                            SELECT COUNT(match_api_id) AS home_games,
                                home_team AS team_name,
                                h_id
                            FROM temp
                            GROUP BY home_team
                        ),
                        away AS (
                            SELECT COUNT(match_api_id) AS away_games,
                                away_team AS team_name,
                                a_id
                            FROM temp
                            GROUP BY away_team
                        ),
                        total AS (
                            SELECT a.away_games + h.home_games AS total_games,
                            h.team_name,
                            h.h_id
                            FROM home AS h
                            JOIN away AS a ON h.h_id = a.a_id
                            GROUP BY h.team_name
                        ),
                        wins AS (
                            SELECT winner, COUNT(*) AS wins
                            FROM temp
                            GROUP BY winner
                        )
                        SELECT t.total_games,
                            t.team_name,
                            w.wins,
                            (w.wins)*100/(t.total_games) AS win_percentage
                        FROM total AS t
                        JOIN wins AS w on t.h_id = w.winner
                        ORDER BY wins DESC;""", conn)
        best_players = pd.read_sql("""SELECT pa.player_api_id , p.player_name , pa.overall_rating
                FROM Player_Attributes as pa
                INNER JOIN Player as p
                ON pa.player_api_id = p.player_api_id
                GROUP BY pa.player_api_id
                ORDER BY pa.overall_rating DESC;""", conn)
        best_players.info()
        away_perf = pd.read_sql_query("""WITH home AS (
    SELECT
        home_team_api_id,
        t.team_long_name || ' (' || c.name || ')' AS team_name,
        SUM(m.home_team_goal) AS home_goal
    FROM
        match AS m
        LEFT JOIN country AS c ON m.country_id = c.id
        LEFT JOIN team AS t ON t.team_api_id = m.home_team_api_id
    GROUP BY
        home_team_api_id, team_name
),
away AS (
    SELECT
        away_team_api_id,
        t.team_long_name || ' (' || c.name || ')' AS team_name,
        SUM(m.away_team_goal) AS away_goal
    FROM
        match AS m
        LEFT JOIN country AS c ON m.country_id = c.id
        LEFT JOIN team AS t ON t.team_api_id = m.away_team_api_id
    GROUP BY
        away_team_api_id, team_name
)
SELECT
    COALESCE(home_team_api_id, away_team_api_id) AS team_api_id,
    COALESCE(home.team_name, away.team_name) AS team_name,
    COALESCE(away_goal, 0) AS away_goal,
    COALESCE(home_goal, 0) AS home_goal,
    COALESCE(away_goal, 0) + COALESCE(home_goal, 0) AS total_goal
FROM
    away
    LEFT JOIN home ON home.team_name = away.team_name
ORDER BY
    total_goal DESC;""", conn)

        allmatches = pd.read_sql_query ("""SELECT
    match.match_api_id,
    l.name AS league,
    l.id AS league_id,
    Country.name AS country,
    match.season,
    match.date,
    match.stage,
    B365H, B365D, B365A,
    CASE
        WHEN match.home_team_goal > match.away_team_goal THEN Team.team_long_name
        WHEN match.home_team_goal < match.away_team_goal THEN OpponentTeam.team_long_name
        ELSE 'Draw'
    END AS winner,
    Team.team_long_name AS home_team,
    Team.team_short_name AS home_team_short,
    match.home_team_api_id AS h_api_id,
    match.home_team_goal AS home_goal,
    CASE
        WHEN match.home_team_goal = match.away_team_goal THEN 1
        WHEN match.home_team_goal > match.away_team_goal THEN 3
        ELSE 0
    END AS home_Points,
    OpponentTeam.team_long_name AS away_team,
    OpponentTeam.team_short_name AS away_team_short,
    match.away_team_api_id AS a_api_id,
    match.away_team_goal AS away_goal,
    CASE
        WHEN match.home_team_goal = match.away_team_goal THEN 1
        WHEN match.home_team_goal < match.away_team_goal THEN 3
        ELSE 0
    END AS away_Points,
    match.home_team_goal - match.away_team_goal AS goal_dif,
    match.home_team_goal + match.away_team_goal AS match_goals
FROM
    match
JOIN
    Country ON match.country_id = Country.id
JOIN
    League AS l ON match.league_id = l.id
JOIN
    Team ON match.home_team_api_id = Team.team_api_id
JOIN
    Team AS OpponentTeam ON match.away_team_api_id = OpponentTeam.team_api_id
JOIN
    Team_Attributes AS htr ON htr.team_api_id = match.home_team_api_id
JOIN
    Team_Attributes AS atr ON atr.team_api_id = match.away_team_api_id
GROUP BY
    match.match_api_id;
""", conn)
        team_points = pd.read_sql("""SELECT
                                        l.name AS league,
                                        t.team_long_name as team_name,
                                        t.team_api_id as team_api_id,
                                        sum(CASE
                                        WHEN home_team_goal = away_team_goal THEN 1
                                        WHEN home_team_goal > away_team_goal THEN 3
                                        WHEN home_team_goal < away_team_goal THEN 0
                                        END)home_Points,
                                        sum(CASE
                                        WHEN home_team_goal = away_team_goal THEN 1
                                        WHEN home_team_goal < away_team_goal THEN 3
                                        WHEN home_team_goal > away_team_goal THEN 0
                                        END)away_Points
                                FROM Match m
                                JOIN Country c on c.id = m.country_id
                                JOIN League l on l.id = m.league_id
                                LEFT JOIN Team AS t on t.team_api_id = m.home_team_api_id
                                GROUP BY  t.team_long_name
                                ORDER BY  t.team_long_name;""", conn)
        team_attrib = pd.read_sql("""SELECT
			Team.team_long_name as team_name,
			Team.team_short_name as team_name_short,
  		Team_Attributes.team_api_id,
  		avg(Team_Attributes.buildUpPlaySpeed) as avg_PlaySpeed,
  		avg(Team_Attributes.buildUpPlayPassing) as avg_PlayPassing,
  		avg(Team_Attributes.buildupplaydribbling) as avg_PlayDribbling,
  		avg(Team_Attributes.chanceCreationPassing) as avg_CreationPassing,
  		avg(Team_Attributes.chanceCreationCrossing) as avg_CreationCrossing,
  		avg(Team_Attributes.chancecreationshooting) as avg_CreationShooting,
  		avg(Team_Attributes.defencepressure) as avg_defencePressure,
  		avg(Team_Attributes.defenceaggression) as avg_defenceAgression,
  		avg(Team_Attributes.defenceteamwidth) as avg_defenceTeamWidth,
      COUNT(Team_Attributes.team_api_id) as seasons_played
FROM Team_Attributes
JOIN Team
ON Team_Attributes.team_api_id = Team.team_api_id
GROUP BY Team_Attributes.team_api_id;""", conn)
        away_home_win = pd.read_sql_query("SELECT \
                        c.name,\
                        case when m.home_team_goal > m.away_team_goal Then 'HOME'\
                        when m.home_team_goal < m.away_team_goal Then 'AWAY'\
                        else 'DRAW' end as VENUE,\
                        count(*) as WINS\
                    FROM\
                        Match as m\
                        join Country as c\
                        on c.id = m.country_id\
                    group by c.name, VENUE\
                    order by c.name desc;""", conn)
        conn.close()
        return tables, unique_players, best_teams, best_players, away_perf, allmatches, team_points, team_attrib, away_home_win
    except Exception as e:
        print(f"Error occurred during data extraction: {e}")
        return None, None, None, None, None, None, None, None, None
def transform_data(unique_players, allmatches, team_attrib):
    try:
        unique_players[['date', 'birthday']] = unique_players[['date', 'birthday']].apply(pd.to_datetime)
        unique_players['age'] = (unique_players['date'] - unique_players['birthday']).dt.days // 365
        unique_players['avg_vision'].fillna(unique_players['avg_vision'].mean(), inplace=True)

        def this_map(x):
            if x < 0:
                return -1
            elif x > 0:
                return 1
            else:
                return 0

        allmatches['result'] = allmatches['home_goal'] - allmatches['away_goal']
        allmatches['result'] = allmatches['result'].apply(lambda x: this_map(x))
        team_attrib.fillna(team_attrib['avg_PlayDribbling'].mean(), inplace=True)

        from scipy.stats import entropy

        def match_entropy(row):
            odds = [row['B365H'], row['B365D'], row['B365A']]
            probs = [1/o for o in odds]
            norm = sum(probs)
            probs = [p/norm for p in probs]
            return entropy(probs)
        allmatches['entropy'] = allmatches.apply(match_entropy, axis=1)
        entropy_means = allmatches.groupby(['season', 'league']).entropy.mean()
        
    except Exception as e:
        print(f"Error occurred during data transformation: {e}")
    return entropy_means
def load_data(entropy_means, best_teams, unique_players, best_players, away_perf, team_points, team_attrib):
    import sqlalchemy as db
    engine = db.create_engine('postgresql://wmjvcgos:qc9bsa5BGcZnggkT5GC9TPsEpVCD_Ri_@flora.db.elephantsql.com/wmjvcgos')
    
    entropy_means.to_sql('entropy_means', engine, if_exists='replace')
    best_teams.to_sql('best_teams', engine, if_exists='replace')
    unique_players.to_sql('unique_players', engine, if_exists='replace')
    best_players.to_sql('best_players', engine, if_exists='replace')
    away_perf.to_sql('away_perf', engine, if_exists='replace')
    team_points.to_sql('team_points', engine, if_exists='replace')
    team_attrib.to_sql('team_attrib', engine, if_exists='replace')
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

dag = DAG(
    'data_pipeline3',
    default_args=default_args,
    description='A DAG for ETL',
    start_date=datetime.now() - timedelta(minutes=5),
    schedule_interval='*/5 * * * *',
)

extract_task = PythonOperator(
    task_id='extract_data',
    python_callable=extract_data,
    dag=dag,
)

transform_task = PythonOperator(
    task_id='transform_data',
    python_callable=transform_data,
    dag=dag,
)

load_task = PythonOperator(
    task_id='load_data',
    python_callable=load_data,
    dag=dag,
)

extract_task >> transform_task >> load_task

